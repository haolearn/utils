package com.hao.util;

import com.google.common.base.Verify;
import com.hao.util.builder.AccountBuilder;
import com.hao.util.builder.BuilderUtilsBuilder;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.*;

public final class BuilderUtils {
  public BuilderUtils() {}

  private boolean lambdaStyle = false; // 是否采用lambda，否采用匿名内部类（兼容JDK7）
  private boolean checkSuper = false; // 是否提取父类属性，默认不检查
  private Class<?> clazz; // 待提取属性的model Class

  public Class<?> getClazz() {
    return clazz;
  }

  public void setClazz(Class<?> clazz) {
    this.clazz = clazz;
  }

  public boolean isLambdaStyle() {
    return lambdaStyle;
  }

  public void setLambdaStyle(boolean lambdaStyle) {
    this.lambdaStyle = lambdaStyle;
  }

  public boolean isCheckSuper() {
    return checkSuper;
  }

  public void setCheckSuper(boolean checkSuper) {
    this.checkSuper = checkSuper;
  }

  private static String lower(String in) {
    Objects.requireNonNull(in);
    return in.substring(0, 1).toLowerCase() + in.substring(1);
  }

  private static String upper(String in) {
    Objects.requireNonNull(in);
    return in.substring(0, 1).toUpperCase() + in.substring(1);
  }
  /**
   * 提取字段
   *
   * @param clazz
   * @param checkSuper 是否判断父类
   * @return
   */
  private static List<String[]> detectFields(Class<?> clazz, boolean checkSuper) {
    List<String[]> flds = new ArrayList<>(); //fiedlClassType fieldName
    Method[] methods = clazz.getDeclaredMethods();
    for (Method m : methods) {
      if ((m.getModifiers() & (Modifier.STATIC | Modifier.PRIVATE)) > 0) {
        continue;
      }
      if (m.getParameterTypes().length == 0
          && (m.getName().startsWith("get") && m.getName().length() > 3
              || m.getName().startsWith("is") && m.getName().length() > 2)) {
        String fldName = lower(m.getName().substring(m.getName().startsWith("is") ? 2 : 3));
        try {
          //valid field
          Field f = clazz.getDeclaredField(fldName);
          f.setAccessible(true);
          flds.add(new String[] {m.getReturnType().getCanonicalName().startsWith("java.lang.")?
                  m.getReturnType().getCanonicalName().substring("java.lang.".length()):m.getReturnType().getCanonicalName(),
                  f.getName()});
        } catch (NoSuchFieldException e) {
        } catch (SecurityException e) {
        }
      }
    }
    if (checkSuper && !clazz.getSuperclass().equals(Object.class)) {
      //父类的字段名，如何子类同名，忽略
      for (String[] fld : detectFields(clazz.getSuperclass(), checkSuper)) {
        boolean keep = true;
        for (String[] e : flds) {
          if (e[1].equals(fld)) {
            keep = false;
            break;
          }
        }
        if (keep) {
          flds.add(fld);
        }
      }
      //      detectFields(clazz.getSuperclass(), checkSuper)
      //          .stream()
      //          .filter(
      //              p -> {
      //                boolean keep = true;
      //                for (String[] e : flds) {
      //                  if (e[1].equals(p)) {
      //                    keep = false;
      //                    break;
      //                  }
      //                }
      //                return keep;
      //              })
      //          .forEach(p -> flds.add(p));
    }
    return flds;
  }

  /**
   * 根据class生成builder 模式的static Builder代码，强制限定赋值顺序，字段不可漏赋值。顺序按照字段名字典顺序
   *
   * @return
   */
  public String createBuilder() {
    System.out.println("package " + this.clazz.getPackage().getName() + ".builder;");
    System.out.println(
        "//Source code is generated by "
            + BuilderUtils.class.getCanonicalName()
            + ",don't change logic");
    System.out.println(
        "//You can move the class into model class with static,and change public interface to private");
    System.out.println("final public class " + clazz.getSimpleName() + "Builder {");
    List<String[]> _flds = detectFields(this.clazz, this.checkSuper);
    // id first
    String[] id = null;
    for (int idx = 0; idx < _flds.size(); idx++) {
      if (_flds.get(idx)[1].equals("id")) {
        id = _flds.remove(idx);
        break;
      }
    }
    // 字段名字典顺序排序.
    //    List<String[]> flds =
    //        _flds.stream().sorted((a, b) -> a[1].compareTo(b[1])).collect(Collectors.toList());
    Collections.sort(
        _flds,
        new Comparator<String[]>() {
          @Override
          public int compare(String[] o1, String[] o2) {
            return o1[1].compareTo(o2[1]);
          }
        });
    List<String[]> flds = _flds;

    if (!Objects.isNull(id)) {
      flds.add(0, id);
    }
    int i = 0;
    for (; i < flds.size() - 1; i++) {
      System.out.println("  public interface _" + flds.get(i)[1] + "_ {");
      System.out.println(
          "    _"
              + flds.get(i + 1)[1]
              + "_ set"
              + upper(flds.get(i)[1])
              + "("
              + flds.get(i)[0]
              + " "
              + flds.get(i)[1]
              + ");");
      System.out.println("  }");
    }
    System.out.println("  public interface _" + flds.get(i)[1] + "_ {");
    System.out.println(
        "    _Build_ set"
            + upper(flds.get(i)[1])
            + "("
            + flds.get(i)[0]
            + " "
            + flds.get(i)[1]
            + ");");
    System.out.println("  }");
    System.out.println("  public interface _Build_ {");
    System.out.println("    " + clazz.getCanonicalName() + " build();");
    System.out.println("  }");
    System.out.println("  public static _" + flds.get(0)[1] + "_ newBuilder() {");
    if (lambdaStyle) {
      // lambda :
      System.out.print("    return ");
      for (String[] fld : flds) {
        System.out.print(fld[1] + " -> ");
      }
      System.out.println("() -> {");
      System.out.println(
          "      " + clazz.getCanonicalName() + " o = new " + clazz.getCanonicalName() + "();");
      for (String[] fld : flds) {
        System.out.println("      " + "o.set" + upper(fld[1]) + "(" + fld[1] + ");");
      }
      System.out.println("      return o;");
      System.out.println("    };");
    } else {
      // 匿名类方式.
      for (int f = 0; f < flds.size(); f++) {

        System.out.print(
            "return  new _"
                + flds.get(f)[1]
                + "_() {\n"
                + "@Override\n"
                + " public _"
                + ((f != flds.size() - 1) ? (flds.get(f + 1)[1]) : "Build")
                + "_ set"
                + upper(flds.get(f)[1])
                + "(final "
                + flds.get(f)[0]
                + " "
                + flds.get(f)[1]
                + ") {\n");
      }
      System.out.print(
          "return new _Build_() {\n"
              + "@Override\n"
              + "public "
              + clazz.getCanonicalName()
              + " build() {\n"
              + clazz.getCanonicalName()
              + " o = new "
              + clazz.getCanonicalName()
              + "();\n");
      for (String[] fld : flds) {
        System.out.println("o.set" + upper(fld[1]) + "(" + fld[1] + ");");
      }
      System.out.println("return o;\n" + "}\n" + "};");
      for (int a = 0; a < flds.size(); a++) {
        System.out.println("}\n};");
      }
    }
    System.out.println("  }");
    System.out.println("}");
    return null;
  }

  public static void createMyBuilder() {
    BuilderUtils builder = new BuilderUtils();
    builder.setCheckSuper(false);
    builder.setLambdaStyle(false);
    builder.setClazz(BuilderUtils.class);
    builder.createBuilder();
  }

  public static void main(String[] args) {
    //    createMyBuilder();
    testCreateAccountBuilder();
    //    testUseAccountBuilder();
  }

  public static void testCreateAccountBuilder() {
    BuilderUtilsBuilder.newBuilder()
        .setCheckSuper(false)
        .setClazz(Account.class)
        .setLambdaStyle(false)
        .build()
        .createBuilder();
  }

  public static void testUseAccountBuilder() {
    Account a =
        AccountBuilder.newBuilder() //
                .setId(100L)
                .setAge(99)
                .setName("")
                .build();
    Verify.verifyNotNull(a, "null %s", a);
    System.out.println(a.toString());
  }
}
